{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/DigitalMarketing/src/Components/Contact/Contact.js\";\nimport React, { useState, useRef } from \"react\";\nimport strings from \"./strings\";\nimport \"./styles.css\";\nimport validator from \"validator\";\nexport default function Contact() {\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phoneRef = useRef();\n  const messageRef = useRef();\n  const [formErrors, updateForm] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    phone: null,\n    message: null\n  });\n\n  const onSubmit = () => {\n    const {\n      errors\n    } = strings; // // first name\n    // validator.isEmpty(firstnameRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, firstName: errors.firstNameRequired });\n    // // last name\n    // validator.isEmpty(lastnameRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, lastName: errors.lastNameRequired });\n    // // email\n    // validator.isEmpty(emailRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, email: errors.emailRequired });\n    // // phone\n    // validator.isEmpty(phoneRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, phone: errors.phoneRequired });\n    // // message\n    // validator.isEmpty(messageRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, message: errors.messageRequired });\n\n    const newErrors = {}; // first name\n\n    if (validator.isEmpty(firstnameRef.current.value, {\n      ignore_whitespace: true\n    })) {\n      // updateForm({ ...formErrors, firstName: errors.firstNameRequired });\n      newErrors = {\n        firstName: errors.firstNameRequired\n      };\n    } // last name\n\n\n    if (validator.isEmpty(lastnameRef.current.value, {\n      ignore_whitespace: true\n    })) {\n      alert(`lastName ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors,\n        lastName: errors.lastNameRequired\n      });\n    } // email\n\n\n    if (validator.isEmpty(emailRef.current.value, {\n      ignore_whitespace: true\n    })) {\n      alert(`email ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors,\n        email: errors.emailRequired\n      });\n    } // phone\n\n\n    if (validator.isEmpty(phoneRef.current.value, {\n      ignore_whitespace: true\n    })) {\n      alert(`phone ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors,\n        phone: errors.phoneRequired\n      });\n    } // message\n\n\n    if (validator.isEmpty(messageRef.current.value, {\n      ignore_whitespace: true\n    })) {\n      alert(`message ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors,\n        message: errors.messageRequired\n      });\n    }\n  }; // an individual form input\n\n\n  const getInput = contactDetails => {\n    const {\n      label,\n      type,\n      ref,\n      error\n    } = contactDetails;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-input-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, label), /*#__PURE__*/React.createElement(\"input\", {\n      type: type,\n      id: \"contact-input\",\n      ref: ref,\n      maxLength: \"25\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }, formErrors[error]));\n  }; // a row of the contact form\n\n\n  const getContactRow = contactDetails => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 12\n      }\n    }, contactDetails.map(e => getInput(e)));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-ready\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, strings.readyToGo), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-promo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }, strings.getAFree), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-title-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, strings.getInTouch), getContactRow([{\n    label: strings.firstName,\n    type: \"text\",\n    ref: firstnameRef,\n    error: \"firstName\"\n  }, {\n    label: strings.lastName,\n    type: \"text\",\n    ref: lastnameRef,\n    error: \"lastName\"\n  }]), getContactRow([{\n    label: strings.email,\n    type: \"email\",\n    ref: emailRef,\n    error: \"email\"\n  }, {\n    label: strings.phone,\n    type: \"phone\",\n    ref: phoneRef,\n    error: \"phone\"\n  }]), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-input-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, strings.message), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"contact-textarea\",\n    ref: messageRef,\n    maxLength: \"2500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, formErrors.message)))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-submit-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"contact-submit-btn\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }\n  }, strings.submit)));\n}","map":{"version":3,"sources":["/Users/macbookair/Desktop/DigitalMarketing/src/Components/Contact/Contact.js"],"names":["React","useState","useRef","strings","validator","Contact","firstnameRef","lastnameRef","emailRef","phoneRef","messageRef","formErrors","updateForm","firstName","lastName","email","phone","message","onSubmit","errors","newErrors","isEmpty","current","value","ignore_whitespace","firstNameRequired","alert","JSON","stringify","lastNameRequired","emailRequired","phoneRequired","messageRequired","getInput","contactDetails","label","type","ref","error","getContactRow","map","e","readyToGo","getAFree","getInTouch","submit"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport strings from \"./strings\";\nimport \"./styles.css\";\nimport validator from \"validator\";\n\nexport default function Contact() {\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phoneRef = useRef();\n  const messageRef = useRef();\n  const [formErrors, updateForm] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    phone: null,\n    message: null,\n  });\n\n  const onSubmit = () => {\n    const { errors } = strings;\n    // // first name\n    // validator.isEmpty(firstnameRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, firstName: errors.firstNameRequired });\n    // // last name\n    // validator.isEmpty(lastnameRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, lastName: errors.lastNameRequired });\n    // // email\n    // validator.isEmpty(emailRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, email: errors.emailRequired });\n    // // phone\n    // validator.isEmpty(phoneRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, phone: errors.phoneRequired });\n    // // message\n    // validator.isEmpty(messageRef.current.value, {\n    //   ignore_whitespace: true,\n    // }) && updateForm({ ...formErrors, message: errors.messageRequired });\n    const newErrors = {};\n    // first name\n    if (\n      validator.isEmpty(firstnameRef.current.value, {\n        ignore_whitespace: true,\n      })\n    ) {\n      // updateForm({ ...formErrors, firstName: errors.firstNameRequired });\n      newErrors = { firstName: errors.firstNameRequired };\n    }\n    // last name\n    if (\n      validator.isEmpty(lastnameRef.current.value, {\n        ignore_whitespace: true,\n      })\n    ) {\n      alert(`lastName ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors, lastName: errors.lastNameRequired });\n    }\n    // email\n    if (\n      validator.isEmpty(emailRef.current.value, {\n        ignore_whitespace: true,\n      })\n    ) {\n      alert(`email ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors, email: errors.emailRequired });\n    }\n    // phone\n    if (\n      validator.isEmpty(phoneRef.current.value, {\n        ignore_whitespace: true,\n      })\n    ) {\n      alert(`phone ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors, phone: errors.phoneRequired });\n    }\n    // message\n    if (\n      validator.isEmpty(messageRef.current.value, {\n        ignore_whitespace: true,\n      })\n    ) {\n      alert(`message ${JSON.stringify(formErrors)}`);\n      updateForm({ ...formErrors, message: errors.messageRequired });\n    }\n  };\n\n  // an individual form input\n  const getInput = (contactDetails) => {\n    const { label, type, ref, error } = contactDetails;\n    return (\n      <div id=\"contact-input-wrapper\">\n        <label>{label}</label>\n        <input type={type} id=\"contact-input\" ref={ref} maxLength=\"25\" />\n        <div id=\"contact-error\">{formErrors[error]}</div>\n      </div>\n    );\n  };\n\n  // a row of the contact form\n  const getContactRow = (contactDetails) => {\n    return <div id=\"contact-row\">{contactDetails.map((e) => getInput(e))}</div>;\n  };\n\n  return (\n    <div id=\"contact-wrapper\">\n      <div id=\"contact-ready\">{strings.readyToGo}</div>\n      <div id=\"contact-promo\">{strings.getAFree}</div>\n      <div id=\"contact-divider\" />\n      <div id=\"contact-form-wrapper\">\n        <div id=\"contact-title-wrapper\">{strings.getInTouch}</div>\n        {getContactRow([\n          {\n            label: strings.firstName,\n            type: \"text\",\n            ref: firstnameRef,\n            error: \"firstName\",\n          },\n          {\n            label: strings.lastName,\n            type: \"text\",\n            ref: lastnameRef,\n            error: \"lastName\",\n          },\n        ])}\n        {getContactRow([\n          {\n            label: strings.email,\n            type: \"email\",\n            ref: emailRef,\n            error: \"email\",\n          },\n          {\n            label: strings.phone,\n            type: \"phone\",\n            ref: phoneRef,\n            error: \"phone\",\n          },\n        ])}\n        <div id=\"contact-row\">\n          <div id=\"contact-input-wrapper\">\n            <label>{strings.message}</label>\n            <textarea id=\"contact-textarea\" ref={messageRef} maxLength=\"2500\" />\n            <div id=\"contact-error\">{formErrors.message}</div>\n          </div>\n        </div>\n      </div>\n      <div id=\"contact-submit-wrapper\">\n        <button id=\"contact-submit-btn\" onClick={onSubmit}>\n          {strings.submit}\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}