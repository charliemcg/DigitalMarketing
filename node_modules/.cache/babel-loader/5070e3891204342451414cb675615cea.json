{"ast":null,"code":"var _jsxFileName = \"/Users/macbookair/Desktop/DigitalMarketing/src/Components/Contact/Contact.js\";\nimport React, { useState, useRef } from \"react\";\nimport strings from \"./strings\";\nimport \"./styles.css\";\nimport validator from \"validator\";\nexport default function Contact() {\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phoneRef = useRef();\n  const messageRef = useRef();\n  const [formErrors, updateErrors] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    message: null\n  });\n\n  const onSubmit = () => {\n    const {\n      errors\n    } = strings;\n    let newErrors = {}; // first name\n\n    validator.isEmpty(firstnameRef.current.value, {\n      ignore_whitespace: true\n    }) && (newErrors = { ...newErrors,\n      firstName: errors.firstNameRequired\n    }); // last name\n\n    validator.isEmpty(lastnameRef.current.value, {\n      ignore_whitespace: true\n    }) && (newErrors = { ...newErrors,\n      lastName: errors.lastNameRequired\n    }); // email\n\n    validator.isEmpty(emailRef.current.value, {\n      ignore_whitespace: true\n    }) ? newErrors = { ...newErrors,\n      email: errors.emailRequired\n    } : !validator.isEmail(emailRef.current.value) && (newErrors = { ...newErrors,\n      email: errors.emailInvalid\n    }); // phone\n\n    let regex = /^[0-9\\s]*$/;\n    !regex.test(phoneRef.current.value) && (newErrors = { ...newErrors,\n      phone: errors.phoneInvalid\n    }); // message\n\n    validator.isEmpty(messageRef.current.value, {\n      ignore_whitespace: true\n    }) && (newErrors = { ...newErrors,\n      message: errors.messageRequired\n    }); //send email or display errors\n\n    Object.keys(newErrors).length === 0 ? alert(\"TODO connect to email server\") : updateErrors(newErrors);\n  }; // an individual form input\n\n\n  const getInput = contactDetails => {\n    const {\n      label,\n      type,\n      ref,\n      error\n    } = contactDetails;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-input-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }\n    }, label, label !== strings.phone && /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 39\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(\"input\", {\n      type: type,\n      className: \"contact-input\",\n      ref: ref,\n      maxLength: \"25\",\n      style: formErrors[error] && {\n        border: \"solid 2px red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, formErrors[error]));\n  }; // a row of the contact form\n\n\n  const getContactRow = contactDetails => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"contact-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 12\n      }\n    }, contactDetails.map(e => getInput(e)));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-ready\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, strings.readyToGo), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-promo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, strings.getAFree), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-divider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-form-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-title-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, strings.getInTouch), getContactRow([{\n    label: strings.firstName,\n    type: \"text\",\n    ref: firstnameRef,\n    error: \"firstName\"\n  }, {\n    label: strings.lastName,\n    type: \"text\",\n    ref: lastnameRef,\n    error: \"lastName\"\n  }]), getContactRow([{\n    label: strings.email,\n    type: \"email\",\n    ref: emailRef,\n    error: \"email\"\n  }, {\n    label: strings.phone,\n    type: \"phone\",\n    ref: phoneRef,\n    error: \"phone\"\n  }]), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-input-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, strings.message, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }\n  }, \"*\")), /*#__PURE__*/React.createElement(\"textarea\", {\n    id: \"contact-textarea\",\n    ref: messageRef,\n    maxLength: \"2500\",\n    style: formErrors.message && {\n      border: \"solid 2px red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, formErrors.message)))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"contact-submit-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"contact-submit-btn\",\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, strings.submit)));\n}","map":{"version":3,"sources":["/Users/macbookair/Desktop/DigitalMarketing/src/Components/Contact/Contact.js"],"names":["React","useState","useRef","strings","validator","Contact","firstnameRef","lastnameRef","emailRef","phoneRef","messageRef","formErrors","updateErrors","firstName","lastName","email","message","onSubmit","errors","newErrors","isEmpty","current","value","ignore_whitespace","firstNameRequired","lastNameRequired","emailRequired","isEmail","emailInvalid","regex","test","phone","phoneInvalid","messageRequired","Object","keys","length","alert","getInput","contactDetails","label","type","ref","error","color","border","getContactRow","map","e","readyToGo","getAFree","getInTouch","submit"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport strings from \"./strings\";\nimport \"./styles.css\";\nimport validator from \"validator\";\n\nexport default function Contact() {\n  const firstnameRef = useRef();\n  const lastnameRef = useRef();\n  const emailRef = useRef();\n  const phoneRef = useRef();\n  const messageRef = useRef();\n  const [formErrors, updateErrors] = useState({\n    firstName: null,\n    lastName: null,\n    email: null,\n    message: null,\n  });\n\n  const onSubmit = () => {\n    const { errors } = strings;\n    let newErrors = {};\n    // first name\n    validator.isEmpty(firstnameRef.current.value, {\n      ignore_whitespace: true,\n    }) && (newErrors = { ...newErrors, firstName: errors.firstNameRequired });\n    // last name\n    validator.isEmpty(lastnameRef.current.value, {\n      ignore_whitespace: true,\n    }) && (newErrors = { ...newErrors, lastName: errors.lastNameRequired });\n    // email\n    validator.isEmpty(emailRef.current.value, {\n      ignore_whitespace: true,\n    })\n      ? (newErrors = { ...newErrors, email: errors.emailRequired })\n      : !validator.isEmail(emailRef.current.value) &&\n        (newErrors = { ...newErrors, email: errors.emailInvalid });\n    // phone\n    let regex = /^[0-9\\s]*$/;\n    !regex.test(phoneRef.current.value) &&\n      (newErrors = { ...newErrors, phone: errors.phoneInvalid });\n    // message\n    validator.isEmpty(messageRef.current.value, {\n      ignore_whitespace: true,\n    }) && (newErrors = { ...newErrors, message: errors.messageRequired });\n    //send email or display errors\n    Object.keys(newErrors).length === 0\n      ? alert(\"TODO connect to email server\")\n      : updateErrors(newErrors);\n  };\n\n  // an individual form input\n  const getInput = (contactDetails) => {\n    const { label, type, ref, error } = contactDetails;\n    return (\n      <div id=\"contact-input-wrapper\">\n        <label>\n          {label}\n          {label !== strings.phone && <span style={{ color: \"red\" }}>*</span>}\n        </label>\n        <input\n          type={type}\n          className=\"contact-input\"\n          ref={ref}\n          maxLength=\"25\"\n          style={formErrors[error] && { border: \"solid 2px red\" }}\n        />\n        <div id=\"contact-error\">{formErrors[error]}</div>\n      </div>\n    );\n  };\n\n  // a row of the contact form\n  const getContactRow = (contactDetails) => {\n    return <div id=\"contact-row\">{contactDetails.map((e) => getInput(e))}</div>;\n  };\n\n  return (\n    <div id=\"contact-wrapper\">\n      <div id=\"contact-ready\">{strings.readyToGo}</div>\n      <div id=\"contact-promo\">{strings.getAFree}</div>\n      <div id=\"contact-divider\" />\n      <div id=\"contact-form-wrapper\">\n        <div id=\"contact-title-wrapper\">{strings.getInTouch}</div>\n        {getContactRow([\n          {\n            label: strings.firstName,\n            type: \"text\",\n            ref: firstnameRef,\n            error: \"firstName\",\n          },\n          {\n            label: strings.lastName,\n            type: \"text\",\n            ref: lastnameRef,\n            error: \"lastName\",\n          },\n        ])}\n        {getContactRow([\n          {\n            label: strings.email,\n            type: \"email\",\n            ref: emailRef,\n            error: \"email\",\n          },\n          {\n            label: strings.phone,\n            type: \"phone\",\n            ref: phoneRef,\n            error: \"phone\",\n          },\n        ])}\n        <div id=\"contact-row\">\n          <div id=\"contact-input-wrapper\">\n            <label>\n              {strings.message}\n              <span style={{ color: \"red\" }}>*</span>\n            </label>\n            <textarea\n              id=\"contact-textarea\"\n              ref={messageRef}\n              maxLength=\"2500\"\n              style={formErrors.message && { border: \"solid 2px red\" }}\n            />\n            <div id=\"contact-error\">{formErrors.message}</div>\n          </div>\n        </div>\n      </div>\n      <div id=\"contact-submit-wrapper\">\n        <button id=\"contact-submit-btn\" onClick={onSubmit}>\n          {strings.submit}\n        </button>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}